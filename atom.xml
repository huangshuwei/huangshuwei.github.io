<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄书伟的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangsw.com/"/>
  <updated>2016-09-10T07:45:23.042Z</updated>
  <id>http://huangsw.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 使用优化（一）</title>
    <link href="http://huangsw.com/2016/08/24/webpack-%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://huangsw.com/2016/08/24/webpack-使用优化（一）/</id>
    <published>2016-08-23T16:10:52.000Z</published>
    <updated>2016-09-10T07:45:23.042Z</updated>
    
    <content type="html">&lt;p&gt;之前写了一篇关于webpack 如何使用的文章：&lt;a href=&quot;http://huangsw.com/2016/07/12/webpack%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/&quot;&gt;webpack 单页面应用实战&lt;/a&gt;，并且写了一个 &lt;a href=&quot;https://github.com/huangshuwei/webpackForSPA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单页面应用的小项目&lt;/a&gt; 放到了github上。正巧公司前段时间用webpack 做了一个项目，项目不大，是基于单页面应用的。但是上线后才发现了一些问题，原来还是有一些要优化改进的地方。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://huangsw.com/2016/07/12/webpack%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/&quot;&gt;webpack 单页面应用实战&lt;/a&gt;这篇文章基本已经满足了我们的需求。比如以下功能我们都已经实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将css从js中分离出来&lt;/li&gt;
&lt;li&gt;使用loader加载css、图片等&lt;/li&gt;
&lt;li&gt;使用插件生成html以便自动引用变更版本号的文件&lt;/li&gt;
&lt;li&gt;配置公共js&lt;/li&gt;
&lt;li&gt;js文件按需加载&lt;/li&gt;
&lt;li&gt;配置开发环境&lt;/li&gt;
&lt;li&gt;压缩js、css、html&lt;/li&gt;
&lt;li&gt;给css、js、图片、字体等添加版本号&lt;/li&gt;
&lt;li&gt;编译后自动打开浏览器&lt;/li&gt;
&lt;li&gt;热替换&lt;/li&gt;
&lt;li&gt;使用代理结合后端服务开发&lt;/li&gt;
&lt;li&gt;编译时区分开发环境、生产环境、热替换环境&lt;/li&gt;
&lt;li&gt;config 文件的合并&lt;/li&gt;
&lt;li&gt;清空发布目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看似不错，好像都已实现了，但是具体到生产环境时还是有问题的。下面有几处优化（下面还是结合&lt;a href=&quot;https://github.com/huangshuwei/webpackForSPA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个项目&lt;/a&gt;）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h2 id=&quot;优化-公共js版本号会变化的问题&quot;&gt;&lt;a href=&quot;#优化-公共js版本号会变化的问题&quot; class=&quot;headerlink&quot; title=&quot;优化-公共js版本号会变化的问题&quot;&gt;&lt;/a&gt;优化-公共js版本号会变化的问题&lt;/h2&gt;&lt;p&gt;这个问题在项目上线之前我没有发现，上线以后，有一次需求变化，我在改变其他js文件的时候，然后打包发布发现公共js的版本号发生了改变，最后检查下来，的确是公共js的内容发生了变化，所以对应的版本号发生了变化。原因就是webpack默认会把最重要的东西放到公共js里，这里面包含webpack启动应用程序的依赖项、模块与模块的依赖关系、以及文件的版本号等信息。所以一旦任意的js文件发生改变都会体现在公共js上。比如我们通过webpack构建后生成这样的文件：&lt;br&gt;&lt;img src=&quot;/uploads/2016-08-24/1.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;再看下common.js 里大致包含什么内容（截取一小部分）：&lt;br&gt;&lt;img src=&quot;/uploads/2016-08-24/2.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;公共js版本号会变的问题在 github 上讨论了一段时间（&lt;a href=&quot;https://github.com/webpack/webpack/issues/1315&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击这里&lt;/a&gt;），只不过之前没注意。有人用 &lt;a href=&quot;https://www.npmjs.com/package/webpack-md5-hash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-md5-hash&lt;/a&gt; 插件实现了，但是感觉比较麻烦，最终还是感觉webpack 的贡献者实现的&lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/chunkhash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这种方式&lt;/a&gt;很简单，并且不需要额外的插件，在新版本的webpack中融合的很好。但是提供的这个demo太简单，在项目中我们还是要注意一些问题的。比如使用‘热替换’时就会报错。所以我们要做一些改变，我们只需要将之前配置公共js的地方：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 会把 ‘entry’ 定义的 common 对应的两个js 打包为 ‘common.js’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new webpack.optimize.CommonsChunkPlugin(&amp;quot;common&amp;quot;, &amp;apos;js/[name].js&amp;apos;, Infinity),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;改为：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; new webpack.optimize.CommonsChunkPlugin(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        devServer ?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;name: &amp;quot;common&amp;quot;, filename: &amp;quot;js/common.js&amp;quot;&amp;#125;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;names: [&amp;quot;common&amp;quot;, &amp;quot;webpackAssets&amp;quot;]&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： ‘devServer’ 是一个标识变量，代表‘热替换’ ，如有疑惑看上一篇&lt;a href=&quot;http://huangsw.com/2016/07/12/webpack%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/&quot;&gt;配置变量标识&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;改成这种设置以后，当时热替换模式的时候不对common.js做处理，如果是开发模式或者发布模式，会从common.js中将各个文件的版本号以及其他重要信息抽出来，放到‘webpackAssets.js’文件中（名称可以自定义）。生成的文件如下，会多出一个文件，这个文件只有几kb：&lt;br&gt;&lt;img src=&quot;/uploads/2016-08-24/3.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;改成这种做法后，一旦其他的文件发生改变，都会在webpackAssets.js文件中得到体现，项目的发布升级，只要额外的将这个文件升级上去即可，而不用将公共js升级上去。这样的优化会非常有利于处理缓存的问题。&lt;/p&gt;
&lt;h2 id=&quot;优化-设置模块目录&quot;&gt;&lt;a href=&quot;#优化-设置模块目录&quot; class=&quot;headerlink&quot; title=&quot;优化-设置模块目录&quot;&gt;&lt;/a&gt;优化-设置模块目录&lt;/h2&gt;&lt;p&gt;如果项目小不设置webpack请求的模块目录没关系，但是一般项目越来越大，webpack会查找很多无用的文件，这时候设置模块目录很有必要性，可以提高webpack编译的速度。即设置 resolve.root 属性。还有一个属性是 moduleDirectories，这两个的区别可以&lt;a href=&quot;https://github.com/webpack/webpack/issues/472&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点这里&lt;/a&gt;。resolve.root 接收的参数是 node_modules 文件加的绝对路径。我们在之前的webpack.config.js 中增加这个配置项：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;resolve：&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    root: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path.resolve(&amp;apos;./node_modules&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样设置后，webpack编译速度会大大加快，不会每个文件夹都搜索一遍。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;扫码可在移动端查看这篇文章：&lt;br&gt;&lt;img src=&quot;/uploads/2016-08-24/m.png&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前写了一篇关于webpack 如何使用的文章：&lt;a href=&quot;http://huangsw.com/2016/07/12/webpack%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/&quot;&gt;webpack 单页面应用实战&lt;/a&gt;，并且写了一个 &lt;a href=&quot;https://github.com/huangshuwei/webpackForSPA&quot;&gt;单页面应用的小项目&lt;/a&gt; 放到了github上。正巧公司前段时间用webpack 做了一个项目，项目不大，是基于单页面应用的。但是上线后才发现了一些问题，原来还是有一些要优化改进的地方。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://huangsw.com/2016/07/12/webpack%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/&quot;&gt;webpack 单页面应用实战&lt;/a&gt;这篇文章基本已经满足了我们的需求。比如以下功能我们都已经实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将css从js中分离出来&lt;/li&gt;
&lt;li&gt;使用loader加载css、图片等&lt;/li&gt;
&lt;li&gt;使用插件生成html以便自动引用变更版本号的文件&lt;/li&gt;
&lt;li&gt;配置公共js&lt;/li&gt;
&lt;li&gt;js文件按需加载&lt;/li&gt;
&lt;li&gt;配置开发环境&lt;/li&gt;
&lt;li&gt;压缩js、css、html&lt;/li&gt;
&lt;li&gt;给css、js、图片、字体等添加版本号&lt;/li&gt;
&lt;li&gt;编译后自动打开浏览器&lt;/li&gt;
&lt;li&gt;热替换&lt;/li&gt;
&lt;li&gt;使用代理结合后端服务开发&lt;/li&gt;
&lt;li&gt;编译时区分开发环境、生产环境、热替换环境&lt;/li&gt;
&lt;li&gt;config 文件的合并&lt;/li&gt;
&lt;li&gt;清空发布目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看似不错，好像都已实现了，但是具体到生产环境时还是有问题的。下面有几处优化（下面还是结合&lt;a href=&quot;https://github.com/huangshuwei/webpackForSPA&quot;&gt;这个项目&lt;/a&gt;）。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://huangsw.com/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>npm 你需要了解的知识点</title>
    <link href="http://huangsw.com/2016/08/20/npm-%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://huangsw.com/2016/08/20/npm-你需要了解的知识点/</id>
    <published>2016-08-20T10:01:27.000Z</published>
    <updated>2016-08-20T10:38:39.079Z</updated>
    
    <content type="html">&lt;p&gt;npm （node package manager）是javascript包管理器，它方便使用javascript的开发者分享、重用、更新代码。截止 2016-8-20号 已经拥有超过了32万的资源包！在日常开发中我们最常用的就是使用npm 安装、卸载资源包，一旦npm 安装成功后一切就变得非常简单。下面介绍下有用但是不太常用的知识点(windows环境)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h2 id=&quot;安装、更新-npm&quot;&gt;&lt;a href=&quot;#安装、更新-npm&quot; class=&quot;headerlink&quot; title=&quot;安装、更新 npm&quot;&gt;&lt;/a&gt;安装、更新 npm&lt;/h2&gt;&lt;p&gt;使用npm 首先你要先安装nodejs，如果要安装nodejs 请移步 &lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs官网&lt;/a&gt;。&lt;br&gt;安装和更新npm 都是使用如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install npm -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;更改-npm-的缓存、全局包文件夹&quot;&gt;&lt;a href=&quot;#更改-npm-的缓存、全局包文件夹&quot; class=&quot;headerlink&quot; title=&quot;更改 npm 的缓存、全局包文件夹&quot;&gt;&lt;/a&gt;更改 npm 的缓存、全局包文件夹&lt;/h2&gt;&lt;p&gt;npm 安装完成后，除了会在nodejs 安装目录中多出一个 npm 目录外，还有两个文件夹比较特别，这两个文件夹不在nodejs 的安装目录下（我的是在C:\Users\Administrator\AppData\Roaming\下）。这两个文件夹分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;npm-cache&lt;/strong&gt;：缓存模块安装目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt;：全局模块安装目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着通过npm 安装的包的增加 npm-cache、npm 中的文件将不断地增大（我本地已经几百兆），有必要将这两个文件夹转移到非C盘的磁盘中。&lt;/p&gt;
&lt;h3 id=&quot;改变npm-cache-的目录&quot;&gt;&lt;a href=&quot;#改变npm-cache-的目录&quot; class=&quot;headerlink&quot; title=&quot;改变npm-cache 的目录&quot;&gt;&lt;/a&gt;改变npm-cache 的目录&lt;/h3&gt;&lt;p&gt;获取 npm-cache 目录路径&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm config get cache&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过命令修改npm-cache 的目录地址（以D盘为例，按需求自行修改）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm config set prefix &amp;quot;D:\Program Files\npm-global&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;改变npm-的目录&quot;&gt;&lt;a href=&quot;#改变npm-的目录&quot; class=&quot;headerlink&quot; title=&quot;改变npm 的目录&quot;&gt;&lt;/a&gt;改变npm 的目录&lt;/h3&gt;&lt;p&gt;我们可以通过命令获取 npm 目录的路径&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm config get prefix&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改 npm 的目录地址&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm config set cache &amp;quot;D:\Program Files\npm-cache&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改完成后，我们是无法正常使用已经安装的全局包的，需要修改‘PATH’环境变量：“电脑&amp;gt;属性&amp;gt;高级&amp;gt;环境变量”，环境变量需要增加npm 目录的地址。如：D:\Program Files\npm-global&lt;br&gt;如果要使修改立即生效，你需要重启电脑，如果你不想重启你可参考&lt;a href=&quot;http://blog.goods-pro.com/146/%E8%AE%A9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%94%9F%E6%95%88%E4%B8%8D%E9%9C%80%E9%87%8D%E5%90%AFwindows/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，或者自行搜索。&lt;/p&gt;
&lt;h2 id=&quot;更新本地包&quot;&gt;&lt;a href=&quot;#更新本地包&quot; class=&quot;headerlink&quot; title=&quot;更新本地包&quot;&gt;&lt;/a&gt;更新本地包&lt;/h2&gt;&lt;p&gt;检查本地有哪些本地包，首先你要cd 到你想要检查的目录下，然后&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm outdated&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么会列出需要更新的包的信息，需要更新的包的名称、当前版本号、最新的版本号等。&lt;br&gt;&lt;img src=&quot;/uploads/2016-08-20/local.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;更新全部&quot;&gt;&lt;a href=&quot;#更新全部&quot; class=&quot;headerlink&quot; title=&quot;更新全部&quot;&gt;&lt;/a&gt;更新全部&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过命令验证是否更新&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm outdated&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;部分更新&quot;&gt;&lt;a href=&quot;#部分更新&quot; class=&quot;headerlink&quot; title=&quot;部分更新&quot;&gt;&lt;/a&gt;部分更新&lt;/h3&gt;&lt;p&gt;如果你只是想更新某一个包到指定的版本，那么你可以直接通过命令修改。如果这个包在package.json 的dependencies 节点下，使用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install grunt@1.0.1 --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在package.json 的devDependencies下使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install grunt@1.0.1 --save-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后通过命令验证是否更新&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm outdated&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新全局包&quot;&gt;&lt;a href=&quot;#更新全局包&quot; class=&quot;headerlink&quot; title=&quot;更新全局包&quot;&gt;&lt;/a&gt;更新全局包&lt;/h2&gt;&lt;p&gt;检查全局包是否有更新&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm outdated -g --depth=0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有会呈现如下的信息（以我的为例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/2016-08-20/global.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;全部更新&quot;&gt;&lt;a href=&quot;#全部更新&quot; class=&quot;headerlink&quot; title=&quot;全部更新&quot;&gt;&lt;/a&gt;全部更新&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm update -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;部分更新-1&quot;&gt;&lt;a href=&quot;#部分更新-1&quot; class=&quot;headerlink&quot; title=&quot;部分更新&quot;&gt;&lt;/a&gt;部分更新&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g webpack&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;未完待续（会继续补充）……&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;npm （node package manager）是javascript包管理器，它方便使用javascript的开发者分享、重用、更新代码。截止 2016-8-20号 已经拥有超过了32万的资源包！在日常开发中我们最常用的就是使用npm 安装、卸载资源包，一旦npm 安装成功后一切就变得非常简单。下面介绍下有用但是不太常用的知识点(windows环境)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;https://www.npmjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="npm" scheme="http://huangsw.com/categories/npm/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 单页面应用实战</title>
    <link href="http://huangsw.com/2016/07/12/webpack%20%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98/"/>
    <id>http://huangsw.com/2016/07/12/webpack 单页面应用实战/</id>
    <published>2016-07-12T09:26:57.000Z</published>
    <updated>2016-08-20T10:24:58.409Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章将介绍如何利用 webpack 进行单页面应用的开发，算是我在实际开发中的一些心得和体会,在这里给大家做一个分享。webpack 的介绍这里就不多说了，可以直接去&lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;查看。 关于 &lt;a href=&quot;https://github.com/huangshuwei/webpackForSPA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个单页面应用&lt;/a&gt; 大家可以直接去我的github上查看，我将结合这个项目去介绍。如果大家觉得这篇文章有不妥的地方，还请指出。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;blockquote&gt;
&lt;p&gt;这篇文章的目的是解决我们在开发中会遇到的问题，不是一篇基础教程，还请谅解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目目录&quot;&gt;&lt;a href=&quot;#项目目录&quot; class=&quot;headerlink&quot; title=&quot;项目目录&quot;&gt;&lt;/a&gt;项目目录&lt;/h2&gt;&lt;p&gt;我将根据这个目录结构进行讲解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/2016-07-12/mulu.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dist：&lt;/strong&gt; 发布的文件目录，即webpack编译输出的目录&lt;br&gt;&lt;strong&gt;libs：&lt;/strong&gt; 放置公共的文件，如js、css、img、font等&lt;br&gt;&lt;strong&gt;mockServer：&lt;/strong&gt; 模拟后端服务，即用webpack开发时模拟调用的后端服务（用nodejs服务模拟）&lt;br&gt;&lt;strong&gt;node_modules：&lt;/strong&gt; 项目依赖的包&lt;br&gt;&lt;strong&gt;src：&lt;/strong&gt; 资源文件，里面包含css、font、html、img、js&lt;br&gt;&lt;strong&gt;package.json：&lt;/strong&gt; 项目配置&lt;br&gt;&lt;strong&gt;webpack.config.js：&lt;/strong&gt; webpack的配置文件&lt;/p&gt;
&lt;h2 id=&quot;项目的使用&quot;&gt;&lt;a href=&quot;#项目的使用&quot; class=&quot;headerlink&quot; title=&quot;项目的使用&quot;&gt;&lt;/a&gt;项目的使用&lt;/h2&gt;&lt;p&gt;建议先运行一下这个项目，有一个大致的了解，再往下阅读。使用说明：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;首先克隆一份到你的本地&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git clone https://github.com/huangshuwei/webpackForSPA.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;然后 cd 到 ‘webpackForSPA’目录下&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd webpackForSPA&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;接着你可以运行不同的命令查看结果&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;发布模式：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm run build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;开发模式：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm run dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;热更新模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm run dev-hrm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;如果使用了热更新模式，并且想要结合后端服务形式运行，那么cd 到‘mockServer’目录下，并执行node 服务：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd mockServer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ node server.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;区分开发、热更新、发布模式&quot;&gt;&lt;a href=&quot;#区分开发、热更新、发布模式&quot; class=&quot;headerlink&quot; title=&quot;区分开发、热更新、发布模式&quot;&gt;&lt;/a&gt;区分开发、热更新、发布模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一般开发时和发布时是不同的，比如开发时文件的访问目录包含‘dist’目录，但是发布上线时，一般会把‘dist’文件夹去掉。&lt;br&gt;当然还有其他的一些细节不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;开发模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  能看到webpack编译输出的文件；&lt;br&gt;  js、css、html文件不需要压缩；&lt;br&gt;  可以正确的运行编译输出后的文件；&lt;br&gt;  这种模式一般只是用来看webpack编译输出后的文件是否正确；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热更新模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  看不到webpack编译输出的文件；&lt;br&gt;  js、css、html文件不需要压缩；&lt;br&gt;  更改完文件后无需重新编译并自动刷新浏览器；&lt;br&gt;  可以结合后端服务开发，避过浏览器同源策略，如结合java、.net服务等；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发布模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  能看到webpack编译输出的文件；&lt;br&gt;  js、css、html文件压缩；&lt;br&gt;  文件的层级目录不需要包含‘dist’目录；&lt;/p&gt;
&lt;p&gt;我区分开发、热更新、发布模式是通过配置‘package.json’文件的运行命令，有些人是通过创建多个不同的webpack的配置文件来达到想要的效果。&lt;/p&gt;
&lt;p&gt;像&lt;a href=&quot;https://github.com/webpack/react-starter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个项目&lt;/a&gt;就是使用了多个webpack的配置文件。&lt;/p&gt;
&lt;h3 id=&quot;配置命令&quot;&gt;&lt;a href=&quot;#配置命令&quot; class=&quot;headerlink&quot; title=&quot;配置命令&quot;&gt;&lt;/a&gt;配置命令&lt;/h3&gt;&lt;p&gt;这是在 package.json 文件中配置的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// package.json 文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;scripts&amp;quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;build&amp;quot;: &amp;quot;webpack  --profile --progress --colors --display-error-details&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;dev&amp;quot;: &amp;quot;webpack  --display-modules --profile --progress --colors --display-error-details&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;dev-hrm&amp;quot;: &amp;quot;webpack-dev-server --config&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;color：&lt;/strong&gt; 输出结果带彩色，比如：会用红色显示耗时较长的步骤&lt;br&gt; &lt;strong&gt;profile：&lt;/strong&gt; 输出性能数据，可以看到每一步的耗时&lt;br&gt; &lt;strong&gt;progress：&lt;/strong&gt; 输出当前编译的进度，以百分比的形式呈现&lt;br&gt; &lt;strong&gt;display-modules：&lt;/strong&gt; 默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块&lt;br&gt; &lt;strong&gt;display-error-details：&lt;/strong&gt; 输出详细的错误信息&lt;br&gt; &lt;strong&gt;webpack-dev-server：&lt;/strong&gt; 将会开启热更新&lt;br&gt; &lt;strong&gt;更多请参考官网：&lt;/strong&gt; &lt;a href=&quot;https://webpack.github.io/docs/cli.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置好了package.json文件,我们就可以这样运行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 开发模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm run dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 热更新模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm run dev-hrm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 发布模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm run build&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置变量标识&quot;&gt;&lt;a href=&quot;#配置变量标识&quot; class=&quot;headerlink&quot; title=&quot;配置变量标识&quot;&gt;&lt;/a&gt;配置变量标识&lt;/h3&gt;&lt;p&gt;配置完了命令，当我们运行不同的命令时，我们可以通过‘process.env.npm_lifecycle_event’去获取当前运行的命令，根据不同的命令，我们可以按照自己的需要做相应的处理。比如开发模式时，允许开启调试，静态资源不要压缩；发布模式时，不允许调试，静态资源要压缩。具体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 获取当前运行的模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var currentTarget = process.env.npm_lifecycle_event;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var debug,          // 是否是调试&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    devServer,      // 是否是热更新模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    minimize;       // 是否需要压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if (currentTarget == &amp;quot;build&amp;quot;) &amp;#123; // 发布模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    debug = false, devServer = false, minimize = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; else if (currentTarget == &amp;quot;dev&amp;quot;) &amp;#123; // 开发模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    debug = true, devServer = false, minimize = false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; else if (currentTarget == &amp;quot;dev-hrm&amp;quot;) &amp;#123; // 热更新模式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    debug = true, devServer = true, minimize = false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;基础配置&quot;&gt;&lt;a href=&quot;#基础配置&quot; class=&quot;headerlink&quot; title=&quot;基础配置&quot;&gt;&lt;/a&gt;基础配置&lt;/h2&gt;&lt;h3 id=&quot;配置路径&quot;&gt;&lt;a href=&quot;#配置路径&quot; class=&quot;headerlink&quot; title=&quot;配置路径&quot;&gt;&lt;/a&gt;配置路径&lt;/h3&gt;&lt;p&gt;为了方便我们频繁使用路径，如下配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var PATHS = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 发布目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: debug ? &amp;apos;/webpackForSPA/dist/&amp;apos; : &amp;apos;/webpackForSPA/&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 公共资源目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    libsPath: path.resolve(process.cwd(), &amp;apos;./libs&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // src 资源目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    srcPath: path.resolve(process.cwd(), &amp;apos;src&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置别名&quot;&gt;&lt;a href=&quot;#配置别名&quot; class=&quot;headerlink&quot; title=&quot;配置别名&quot;&gt;&lt;/a&gt;配置别名&lt;/h3&gt;&lt;p&gt;webpack的别名的目的就是简化我们的操作，引用资源时直接使用别名即可（和 &lt;a href=&quot;http://seajs.org/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;seajs&lt;/a&gt; 里的别名用法一样）。配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;resolve:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     alias: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        jquery: path.join(PATHS.libsPath, &amp;quot;js/jquery/jquery&amp;quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        underscore: path.join(PATHS.libsPath, &amp;quot;js/underscore/underscore.js&amp;quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        bootstrapcss: path.join(PATHS.libsPath, &amp;quot;css/bootstrap/bootstrap-3.3.5.css&amp;quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        indexcss: path.join(PATHS.srcPath, &amp;quot;css/index.css&amp;quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置webpack编译入口&quot;&gt;&lt;a href=&quot;#配置webpack编译入口&quot; class=&quot;headerlink&quot; title=&quot;配置webpack编译入口&quot;&gt;&lt;/a&gt;配置webpack编译入口&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;entry:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 入口 js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    index: &amp;apos;./src/js/index.js&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 公共js包含的文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    common: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path.join(PATHS.libsPath, &amp;quot;js/jquery/jquery.js&amp;quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path.join(PATHS.libsPath, &amp;quot;js/underscore/underscore.js&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置webpack编译输出&quot;&gt;&lt;a href=&quot;#配置webpack编译输出&quot; class=&quot;headerlink&quot; title=&quot;配置webpack编译输出&quot;&gt;&lt;/a&gt;配置webpack编译输出&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;output：&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 输出目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: path.join(__dirname, &amp;apos;dist&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 发布后，资源的引用目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: PATHS.publicPath,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 文件名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &amp;apos;js/[name].js&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 按需加载模块时输出的文件名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    chunkFilename: &amp;apos;js/[name].js&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;提取css到单独的文件&quot;&gt;&lt;a href=&quot;#提取css到单独的文件&quot; class=&quot;headerlink&quot; title=&quot;提取css到单独的文件&quot;&gt;&lt;/a&gt;提取css到单独的文件&lt;/h2&gt;&lt;p&gt;当我们在js文件中通过require(‘’)引用js时，webpack 默认会将css文件与当前js文件打包一起，但是这种方式会阻塞页面的加载，因为css的执行要等待js文件加载进来。所以我们会把css从js文件中提取出来，放到一个单独的css文件中。这时我们要使用webpack的插件：&lt;a href=&quot;https://github.com/webpack/extract-text-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;extract-text-webpack-plugin&lt;/a&gt;，配置如下：&lt;/p&gt;
&lt;p&gt;引入插件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ExtractTextPlugin = require(&amp;quot;extract-text-webpack-plugin&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置 loader&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        test: /\.css$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loader: ExtractTextPlugin.extract(&amp;quot;style-loader&amp;quot;, &amp;quot;css-loader!postcss-loader&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置 plugins&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new ExtractTextPlugin(&amp;quot;css/[name].css&amp;quot;, &amp;#123;allChunks: true&amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;公共js打包&quot;&gt;&lt;a href=&quot;#公共js打包&quot; class=&quot;headerlink&quot; title=&quot;公共js打包&quot;&gt;&lt;/a&gt;公共js打包&lt;/h2&gt;&lt;p&gt;项目中，我们通常会有公共的js，比如 jquery、bootstrap、underscore 等，那么这时候我们需要将这些公共的js单独打包。这时我们需要用webpack自带的插件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 会把 ‘entry’ 定义的 common 对应的两个js 打包为 ‘common.js’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new webpack.optimize.CommonsChunkPlugin(&amp;quot;common&amp;quot;, &amp;apos;js/[name].js&amp;apos;, Infinity),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;资源添加版本号&quot;&gt;&lt;a href=&quot;#资源添加版本号&quot; class=&quot;headerlink&quot; title=&quot;资源添加版本号&quot;&gt;&lt;/a&gt;资源添加版本号&lt;/h2&gt;&lt;p&gt;项目上线后，资源的版本号十分重要。资源没有版本号，即使重新发布，客户端浏览器可能会把老的资源缓存下来，导致无法下载最新的资源。webpack 支持给资源添加版本号，不仅仅是js、css,甚至font、img都可以添加版本号。我们可以通过webpack中的‘chunkhash’来解决。&lt;/p&gt;
&lt;p&gt;首先要了解下webpack 中 [hash]、[chunkhash]、[chunkhash:8]的区别。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;[hash]：&lt;/strong&gt; webpack编译会产生一个hash值&lt;br&gt; &lt;strong&gt;[chunkhash]：&lt;/strong&gt; 每个模块的hash值&lt;br&gt; &lt;strong&gt;[chunkhash:8]：&lt;/strong&gt; 取[chunkhash]的前8位&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐发布模式使用版本号，其他模式无需使用，热更新模式不支持‘chunkhash’，但是支持‘hash’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源加版本号，那么我们的输出的部分都要做改动，并且要区分当前的命令模式，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;output：&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 输出目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: path.join(__dirname, &amp;apos;dist&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 发布后，资源的引用目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: PATHS.publicPath,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 文件名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: devServer ? &amp;apos;js/[name].js&amp;apos; : &amp;apos;js/[name]-[chunkhash:8].js&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 按需加载模块时输出的文件名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    chunkFilename: devServer ? &amp;apos;js/[name].js&amp;apos; : &amp;apos;js/[name]-[chunkhash:8].js&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出公共js的地方也要改动：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 会把 ‘entry’ 定义的 common 对应的两个js 打包为 ‘common.js’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new webpack.optimize.CommonsChunkPlugin(&amp;quot;common&amp;quot;, &amp;quot;&amp;quot; + (devServer ? &amp;apos;js/[name].js&amp;apos; : &amp;quot;js/[name]-[chunkhash:8].js&amp;quot;), Infinity),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;页面自动引入含有版本号的文件&quot;&gt;&lt;a href=&quot;#页面自动引入含有版本号的文件&quot; class=&quot;headerlink&quot; title=&quot;页面自动引入含有版本号的文件&quot;&gt;&lt;/a&gt;页面自动引入含有版本号的文件&lt;/h2&gt;&lt;p&gt;有个版本号后，我们考虑如何通过html引用这些含有版本号的js、css、font、img。webpack每次编译后的资源 chunkhash 会随着内容的变化而变化，所以我们不可能每次都手动的更改html这些资源的引用路径。这时我们要用到webpack的插件：&lt;a href=&quot;https://github.com/ampedandwired/html-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html-webpack-plugin&lt;/a&gt;。这个插件的目的是生成html,也可以根据模板生成html，当然还有其他的功能，具体看插件介绍。下面是的配置：&lt;/p&gt;
&lt;p&gt;引入插件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var HtmlWebpackPlugin = require(&amp;apos;html-webpack-plugin&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置 plugins，生成需要的html&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new HtmlWebpackPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &amp;apos;index.html&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        template: __dirname + &amp;apos;/src/index.html&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        inject: &amp;apos;true&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new HtmlWebpackPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &amp;apos;html/hrm.html&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        template: __dirname + &amp;apos;/src/html/hrm.html&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        inject: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new HtmlWebpackPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &amp;apos;html/home.html&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        template: __dirname + &amp;apos;/src/html/home.html&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        inject: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们前面说过，webpack 默认只识别 js 文件，所以对于html也要使用对应的loader:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;loaders:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123;test: /\.html$/,loader: &amp;quot;html&amp;quot;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;引用图片和字体&quot;&gt;&lt;a href=&quot;#引用图片和字体&quot; class=&quot;headerlink&quot; title=&quot;引用图片和字体&quot;&gt;&lt;/a&gt;引用图片和字体&lt;/h2&gt;&lt;p&gt;引用图片和字体，需要对应的loader,并且可以设置这些资源大小的临界值，当小于临界值的时候，字体或者图片文件会以base64的形式在html引用，否则则是以资源路径的形式引用。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 图片 loader&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test: /\.(png|gif|jpe?g)$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loader: &amp;apos;url-loader&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    query: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         *  limit=10000 ： 10kb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         *  图片大小小于10kb 采用内联的形式，否则输出图片&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         * */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        limit: 10000,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name: &amp;apos;/img/[name]-[hash:8].[ext]&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 字体loader&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test: /\.(eot|woff|woff2|ttf|svg)$/,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loader: &amp;apos;url-loader&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    query: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        limit: 5000,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name: &amp;apos;/font/[name]-[hash:8].[ext]&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;资源文件的压缩&quot;&gt;&lt;a href=&quot;#资源文件的压缩&quot; class=&quot;headerlink&quot; title=&quot;资源文件的压缩&quot;&gt;&lt;/a&gt;资源文件的压缩&lt;/h2&gt;&lt;p&gt;js、css、html的压缩是少不了的，webpack 自带了压缩插件，如果某些对象名称不想被压缩，可以排除不想要压缩的对象名称。配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new webpack.optimize.UglifyJsPlugin(&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            mangle: &amp;#123; // 排除不想要压缩的对象名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                except: [&amp;apos;$super&amp;apos;, &amp;apos;$&amp;apos;, &amp;apos;exports&amp;apos;, &amp;apos;require&amp;apos;, &amp;apos;module&amp;apos;, &amp;apos;_&amp;apos;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            compress: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                warnings: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                comments: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用jquery、underscore&quot;&gt;&lt;a href=&quot;#使用jquery、underscore&quot; class=&quot;headerlink&quot; title=&quot;使用jquery、underscore&quot;&gt;&lt;/a&gt;使用jquery、underscore&lt;/h2&gt;&lt;p&gt;通过webpack编译输出后的项目中，虽然页面已经引用了jquery、underscore,但是还是无法直接使用‘$’、‘_’对象，我们可以这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var $ = require(&amp;apos;jquery&amp;apos;)；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var _ =  require(&amp;apos;underscore&amp;apos;)；&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是这样实在不方便，如果我们就是要使用‘$’、‘_’对象直接操作，webpack 内置的插件可以帮我们解决。具体如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;new webpack.ProvidePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $: &amp;quot;jquery&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        jQuery: &amp;quot;jquery&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;window.jQuery&amp;quot;: &amp;quot;jquery&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;_&amp;quot;: &amp;quot;underscore&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;代码分割，按需加载&quot;&gt;&lt;a href=&quot;#代码分割，按需加载&quot; class=&quot;headerlink&quot; title=&quot;代码分割，按需加载&quot;&gt;&lt;/a&gt;代码分割，按需加载&lt;/h2&gt;&lt;p&gt;在单页面应用中，当我们加载其他的模板文件时，想要引用这个模板文件对应的js。如果我们通过这种方式require(),那么webpack会将这个模板文件对应的js也会和当前js打包成一个js。如果项目比较大，那么js文件也将越来越大。我们希望的是加载模板文件的时候动态的引用这个模板文件对应的js。那么我们可以通过 require.ensure()的方式。&lt;/p&gt;
&lt;p&gt;比如现在有两个导航菜单：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#home&amp;quot;&amp;gt;home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#hrm&amp;quot;&amp;gt;HRM&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们给这两个菜单绑定点击事件，当点击‘home’时引用对应的‘home.js’;当点击‘HRM’时引用对应的‘hrm.js’,那么大致可以这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function loadJs(jsPath) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var currentMod;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (jsPath === &amp;apos;./home&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        require.ensure([], function (require) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            currentMod = require(&amp;apos;./home&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;, &amp;apos;home&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    else if (jsPath === &amp;apos;./hrm&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        require.ensure([], function (require) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            currentMod = require(&amp;apos;./hrm&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;, &amp;apos;hrm&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;全局环境变量&quot;&gt;&lt;a href=&quot;#全局环境变量&quot; class=&quot;headerlink&quot; title=&quot;全局环境变量&quot;&gt;&lt;/a&gt;全局环境变量&lt;/h2&gt;&lt;p&gt;有时我们只有在开发过程中，才想输出log日志。可以用以下webpack内置的插件解决：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      new webpack.DefinePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 全局debug标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        __DEV__: debug,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时代码中就可以这么写了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;if (__DEV__) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;debug 模式&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;清空发布目录&quot;&gt;&lt;a href=&quot;#清空发布目录&quot; class=&quot;headerlink&quot; title=&quot;清空发布目录&quot;&gt;&lt;/a&gt;清空发布目录&lt;/h2&gt;&lt;p&gt;发布前清空发布目录是有必要的，我们可以通过&lt;a href=&quot;https://github.com/johnagan/clean-webpack-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;‘clean-webpack-plugin’&lt;/a&gt;插件解决：&lt;/p&gt;
&lt;p&gt;引入插件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var CleanWebpackPlugin = require(&amp;apos;clean-webpack-plugin&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置plugins:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new CleanWebpackPlugin([&amp;apos;dist&amp;apos;], &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        root: &amp;apos;&amp;apos;, // An absolute path for the root  of webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        verbose: true,// Write logs to console.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dry: false // Do not delete anything, good for testing.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;热更新结合后端服务&quot;&gt;&lt;a href=&quot;#热更新结合后端服务&quot; class=&quot;headerlink&quot; title=&quot;热更新结合后端服务&quot;&gt;&lt;/a&gt;热更新结合后端服务&lt;/h2&gt;&lt;h3 id=&quot;热更新&quot;&gt;&lt;a href=&quot;#热更新&quot; class=&quot;headerlink&quot; title=&quot;热更新&quot;&gt;&lt;/a&gt;热更新&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://webpack.github.io/docs/hot-module-replacement-with-webpack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;热更新&lt;/a&gt;可以在你代码改变的时候即时编译输出，不用每次都要从都重新编译一遍，并且除了第一次编译比较慢，后面的编译都是增量编译，速度很快。有了这个功能，我们就不需要，每次都从头编译一次了。配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Enable multi-pass compilation for enhanced performance&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // in larger projects. Good default.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        new webpack.HotModuleReplacementPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            multiStep: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;devServer: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Enable history API fallback so HTML5 History API based&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // routing works. This is a good default that will come&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // in handy in more complicated setups.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        historyApiFallback: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Unlike the cli flag, this doesn&amp;apos;t set&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // HotModuleReplacementPlugin!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hot: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        inline: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Display only errors to reduce the amount of output.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        stats: &amp;apos;errors-only&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host: &amp;quot;localhost&amp;quot;, // Defaults to `localhost`   process.env.HOST&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        port: &amp;quot;8080&amp;quot;,  // Defaults to 8080   process.env.PORT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时我们只要打开浏览器，输入：localhost:8080/ 就能看到结果，并且在你修改某些源文件后，浏览器会自动刷新，就能看到webpack 即时编译输出的结果，而不需要重新编译。&lt;/p&gt;
&lt;h3 id=&quot;结合后端服务&quot;&gt;&lt;a href=&quot;#结合后端服务&quot; class=&quot;headerlink&quot; title=&quot;结合后端服务&quot;&gt;&lt;/a&gt;结合后端服务&lt;/h3&gt;&lt;p&gt;我们在使用webpack开发时难免要结合后端服务开发，比如我们用webstorm 编译器开发项目，需要调用java的服务，由于有同源策略问题，这时我们会收到相关报错信息。这时我们可以通过代理的方式绕过同源策略。&lt;br&gt;这里我用nodejs 模拟一个后端服务，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// ~/mockServer/server.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var http = require(&amp;apos;http&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var content = &amp;apos;▍if you see that,It means you have get the correct data by backend server(mock data by nodejs server)!&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var srv = http.createServer(function (req, res) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.writeHead(200, &amp;#123;&amp;apos;Content-Type&amp;apos;: &amp;apos;application/text&amp;apos;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.end(content);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;srv.listen(8888, function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;listening on localhost:8888&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们需要这样配置去调用这个nodejs 的服务。&lt;br&gt;首先将热更新配置的代码修改为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Enable multi-pass compilation for enhanced performance&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // in larger projects. Good default.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        new webpack.HotModuleReplacementPlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            multiStep: true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;devServer: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Enable history API fallback so HTML5 History API based&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // routing works. This is a good default that will come&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // in handy in more complicated setups.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        historyApiFallback: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Unlike the cli flag, this doesn&amp;apos;t set&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // HotModuleReplacementPlugin!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hot: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        inline: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Display only errors to reduce the amount of output.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        stats: &amp;apos;errors-only&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host: &amp;quot;localhost&amp;quot;, // Defaults to `localhost`   process.env.HOST&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        port: &amp;quot;8080&amp;quot;,  // Defaults to 8080   process.env.PORT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;apos;/devApi/*&amp;apos;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    target: &amp;apos;http://localhost:8888/&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    secure: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    /*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     * rewrite 的方式扩展性更强，不限制服务的名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     * */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    rewrite: function (req) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        req.url = req.url.replace(/^\/devApi/, &amp;apos;&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后配置一个全局的环境变量，通过&lt;code&gt;DefinePlugin&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; new webpack.DefinePlugin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        __DEVAPI__: devServer ? &amp;quot;/devApi/&amp;quot; : &amp;quot;&amp;apos;&amp;apos;&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后在调用服务的地方，只需要在调用地址前添加 &lt;code&gt;__DEVAPI__&lt;/code&gt;全局环境变量即可，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url: __DEVAPI__ + &amp;apos;http://localhost:8888/&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        data: &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: &amp;apos;get&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dataType: &amp;apos;text&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        success: function (text) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样在热更新的模式下，当有&lt;code&gt;__DEVAPI__&lt;/code&gt;的地方就会自动识别为&lt;code&gt;/devApi/&lt;/code&gt;，而这里会通过代理处理帮你重写掉，绕过同源策略。&lt;/p&gt;
&lt;h2 id=&quot;自动打开浏览器&quot;&gt;&lt;a href=&quot;#自动打开浏览器&quot; class=&quot;headerlink&quot; title=&quot;自动打开浏览器&quot;&gt;&lt;/a&gt;自动打开浏览器&lt;/h2&gt;&lt;p&gt;虽然以上的工作几乎已经满足我们对webpack的要求了，但是我们还想懒一点，想在热更新模式下，编译完成后自动打开浏览器。那么我们可以通过这个插件&lt;a href=&quot;open-browser-webpack-plugin&quot;&gt;open-browser-webpack-plugin&lt;/a&gt;解决：&lt;/p&gt;
&lt;p&gt;引用插件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var OpenBrowserPlugin = require(&amp;apos;open-browser-webpack-plugin&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置插件，这个配置要根据项目的具体情况去配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// webpack.config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; new OpenBrowserPlugin(&amp;#123;url: &amp;apos;http://localhost:8080&amp;apos; + PATHS.publicPath + &amp;apos;index.html&amp;apos;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;以上就是这篇文章的主要内容，希望通过这篇文章能够给大家带来一些启发。如果有觉得哪里不对，或者不合理的地方，欢迎指出。其实webpack还有一个关于版本号的&lt;a href=&quot;https://github.com/webpack/webpack/issues/672&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bug&lt;/a&gt;，不知道是不是有人解决了，如果有人已经解决了，还请分享。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章将介绍如何利用 webpack 进行单页面应用的开发，算是我在实际开发中的一些心得和体会,在这里给大家做一个分享。webpack 的介绍这里就不多说了，可以直接去&lt;a href=&quot;http://webpack.github.io/docs/&quot;&gt;官网&lt;/a&gt;查看。 关于 &lt;a href=&quot;https://github.com/huangshuwei/webpackForSPA&quot;&gt;这个单页面应用&lt;/a&gt; 大家可以直接去我的github上查看，我将结合这个项目去介绍。如果大家觉得这篇文章有不妥的地方，还请指出。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://huangsw.com/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>hello everyone</title>
    <link href="http://huangsw.com/2016/07/12/hello-everyone/"/>
    <id>http://huangsw.com/2016/07/12/hello-everyone/</id>
    <published>2016-07-12T09:20:08.000Z</published>
    <updated>2016-07-12T12:46:06.131Z</updated>
    
    <content type="html">&lt;p&gt;大家好，欢迎来到我的博客网站。我是一名web开发者，在这里我将会写一些与 web技术 有关的文章，欢迎大家随时光顾…&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h2 id=&quot;关于本站&quot;&gt;&lt;a href=&quot;#关于本站&quot; class=&quot;headerlink&quot; title=&quot;关于本站&quot;&gt;&lt;/a&gt;关于本站&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;搭建环境&lt;/strong&gt;&lt;br&gt;这是一个利用 &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 创建的网站&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客框架&lt;/strong&gt;&lt;br&gt;利用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt; 作为搭建博客的框架&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客主题&lt;/strong&gt;&lt;br&gt;基于 hexo 的博客主题 &lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-next&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;大家如果对这个网站感兴趣，欢迎留言&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，欢迎来到我的博客网站。我是一名web开发者，在这里我将会写一些与 web技术 有关的文章，欢迎大家随时光顾…&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://huangsw.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
